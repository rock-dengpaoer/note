软件运行分析
#######################

机器语言程序
***************


电脑只认识0和1，而且电脑最重要的运算与逻辑判断是在CPU内部，而CPU具有指令集。

因此，需要CPU工作时，就要参考指令集的内容，然后编写让CPU能读懂的脚本给CPU执行。

编译器让人类写的程序语言转译成机器能看懂的机器码

操作系统
***************

操作系统其实也是一组程序，这组程序的重点在于管理电脑的所有活动以及驱动系统中的所有硬件。

只有内核提供的功能，你的电脑系统才能帮你完成。

内核主要在管理硬件与提供相关的功能（例如读写硬盘、网络功能、CPU资源分配等）

内核程序放置到内存当中的区块是受保护的，并且启动后就一直常驻在内存当中。

应用程序编程接口（API）

只要硬件不同，内核就得要进行修改。

为了保护内核，并且能够让程序员比较容易开发软件，操作系统出了内核程序之外，通常还会提供一套API，那就是系统调用层。程序员只要遵循公认的系统调用参数来开发软件，该软件就能够在该内核上运行。

一些概念
- 操作系统下的内核层直接参考硬件规格写成，所以同一个操作系统程序不能够在不一样的硬件程序下运行。
- 操作系统只是管理整个硬件资源，包括CPU、内存、输入输出设备及文件系统等。
- 应用程序的开发都是参考操作系统提供的API，所以该应用程序只能在该操作系统上边运行而已，不可以在其他操作系统上运行。

**内核功能**
- 系统调用接口
- 进程管理
- 内存管理
- 文件系统管理
- 设备驱动


一些零碎的点
- 操作系统必须能够驱动硬件，如此应用程序才能够使用该硬件功能
- 一般来说，操作系统会提供API，让开发商编写他们的驱动程序。
- 要使用新硬件功能，必须要安装厂商提供的驱动程序才行。
- 驱动程序是由厂商提供，与操作系统无关

应用程序
************************

应用程序是参考操作系统提供的API所开发出来的软件，这些软件可以让用户操作，以实现某些功能。

linux启动流程分析
*************************

- 加载BIOS的硬件信息与进行自我检测（自检），并根据设置取得第一个可启动的设备。
- 读取并执行第一个启动设备内MBR的启动引导程序（亦或是grub2、spfdisk等程序）。
- 根据启动引导程序的设置加载kernel，kernel会开始检测硬件与加载驱动程序。
- 在硬件驱动成功后，kernel会主动调用systemd程序，并以default.target流程启动
    -   systemd执行sysinit.target初始化系统及basic.target准备操作系统
    -   systemd启动multi-user.target下的本机与服务器服务。
    -   systemd执行multi-user.target下的/etc/rc.d/rc.local文件
    -   systemd执行multi-user.target下的getty.target及登录服务
    -   systemd执行graphical需要的服务


解释

- BIOS：不论传统BIOS还是UEFI BIOS都会被简称为BIOS
- MBR： 虽然分区表有传统MBR以及新式GPT，不过GPT也有保留一块兼容MBR的区块，因此，下边的说明在安装boot loader 的部分，还简称MBR。总之，MBR就代表该磁盘的最前面可安装bootloader的那个区块。

---